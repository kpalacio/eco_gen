source("http://bioconductor.org/workflows.R")
workflowInstall("rnaseqGene")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library("ggplot2")
library("DESeq2")
countsTable <- read.delim('countsdata_trim.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ day + location + health)
# In this typical model, the "sex effect" represents the overall effect controlling for differences due to population and devstage. page 26-27 manual DESeq2.pdf
# The last term in the model is what is tested.  In this case sex.
#  This is not the same as an interaction.
dim(dds)
[1] 26550    65
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
[1] 13334    65  # at > 100; little more than an average of 10 reads per sample for the 93 samples
colSums(counts(dds))
hist(colSums(counts(dds)), breaks = 80, xlim=c(0,max(colSums(counts(dds)))))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ day + location + health)
dim(dds)
[1] 26550    65
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
colSums(counts(dds))
hist(colSums(counts(dds)), breaks = 80, xlim=c(0,max(colSums(counts(dds)))))
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))
dds <- DESeq(dds)  # this step takes a loooong time ~4 minutes with the trimmed data set
library("DESeq2")
library("ggplot2")
setwd("C:/Users/Kti/Desktop/eco_gen")
countsTable <- read.delim('countsdata_trim.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_trim.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ day + location + health)
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
colSums(counts(dds))
hist(colSums(counts(dds)), breaks = 80, xlim=c(0,max(colSums(counts(dds)))))
colData(dds)$health <- factor(colData(dds)$health, levels=c("H","S"))
dds <- DESeq(dds)  # this step takes a loooong time ~4 minutes with the trimmed data set
save(dds, file="dds.trim.Robject")
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
plotMA(res, main="DESeq2", ylim=c(-2,2))
d <- plotCounts(dds, gene="TRINITY_DN46709_c0_g1_TRINITY_DN46709_c0_g1_i1_g.23138_m.23138", intgroup=(c("status","day","location")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = date)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3) + scale_y_log10(breaks=c(25,100,1000)) + ylim(0,2500)
p
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("health"))
plotPCA(vsd, intgroup=c("day"))
plotPCA(vsd, intgroup=c("location"))
plotPCA(vsd, intgroup=c("health","location"))
rld <- rlog(dds, blind=FALSE) # this takes too long with such a large data set!
plotPCA(rld, intgroup=c("status","date"))
plotPCA(rld, intgroup=c("status","date"))
pdf(file="PCA_1v2_allgenes.pdf", height=5.5, width=5.5)
plotPCA(rld, intgroup=c("status","day","location"))
dev.off()
pdf(file="PCA_1v2.pdf", height=5.5, width=5.5)
data <- plotPCA(rld, intgroup=c("status","day","location"), returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
ggplot(data, aes(PC1, PC2, color=sex, shape=devstage)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance"))
dev.off()
library("pheatmap")
install.packages("pheatmap")
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)), decreasing=TRUE)[1:20]
nt <- normTransform(dds) # defaults to log2(x+1)
select <- order(rowMeans(counts(dds,normalized=TRUE)), decreasing=TRUE)[1:20]
nt <- normTransform(dds) # defaults to log2(x+1) ###ERROR : could not find function "normTransform
log2.norm.counts <- assay(nt)[select,]
df <- as.data.frame(colData(dds)[,c("condition","type")])
pheatmap(log2.norm.counts, cluster_rows=FALSE, show_rownames=FALSE, cluster_cols=FALSE)
pheatmap(assay(vsd)[select,], cluster_rows=FALSE, show_rownames=FALSE, cluster_cols=FALSE)
pheatmap(assay(vsd)[select,], cluster_rows=FALSE, show_rownames=FALSE)
pheatmap(assay(vsd)[select,], show_rownames=FALSE)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ health + location + health:location)
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
res <- results(dds, name="healthS.locationsub")
res <- res[order(res$padj),]
head(res)
summary(res)
d <- plotCounts(dds, gene="TRINITY_DN46124_c1_g2_TRINITY_DN46124_c1_g2_i6_g.21322_m.21322", intgroup=(c("location","health","day")), returnData=TRUE)
d
p <- ggplot(d, aes(x= health, y=count, shape = location, colour = day, fill=location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- ggplot(d, aes(x= health, y=count, shape = location, colour = day, fill=location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- ggplot(d, aes(x= health, y=count, shape = location, colour = day, fill=location)) + theme_minimal() + theme(text = element_text(size=20), panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 4, alpha=0.9) + scale_y_log10(breaks=c(25,100,4000)) + scale_x_discrete(limits=c("H","S")) + scale_shape_manual(values=c(21,24))
p
ggsave("dot_plot-TRINITY_DN46124_c1_g2_TRINITY_DN46124_c1_g2_i6_g.21322_m.21322.png", p, width=8, height=4, dpi=300)
